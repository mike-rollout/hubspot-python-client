# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.pydantic_utilities import pydantic_v1
from ..core.request_options import RequestOptions
from ..types.simple_public_object import SimplePublicObject

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class PublicObjectClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def post_crm_v_3_objects_contacts_merge_merge(
        self,
        *,
        object_id_to_merge: str,
        primary_object_id: str,
        request_options: typing.Optional[RequestOptions] = None
    ) -> SimplePublicObject:
        """
        Parameters
        ----------
        object_id_to_merge : str

        primary_object_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SimplePublicObject
            successful operation

        Examples
        --------
        from rollout.client import RolloutApi

        client = RolloutApi(
            private_app_legacy="YOUR_PRIVATE_APP_LEGACY",
            private_app="YOUR_PRIVATE_APP",
            token="YOUR_TOKEN",
        )
        client.public_object.post_crm_v_3_objects_contacts_merge_merge(
            object_id_to_merge="objectIdToMerge",
            primary_object_id="primaryObjectId",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "crm/v3/objects/contacts/merge",
            method="POST",
            json={"objectIdToMerge": object_id_to_merge, "primaryObjectId": primary_object_id},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(SimplePublicObject, _response.json())  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncPublicObjectClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def post_crm_v_3_objects_contacts_merge_merge(
        self,
        *,
        object_id_to_merge: str,
        primary_object_id: str,
        request_options: typing.Optional[RequestOptions] = None
    ) -> SimplePublicObject:
        """
        Parameters
        ----------
        object_id_to_merge : str

        primary_object_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SimplePublicObject
            successful operation

        Examples
        --------
        import asyncio

        from rollout.client import AsyncRolloutApi

        client = AsyncRolloutApi(
            private_app_legacy="YOUR_PRIVATE_APP_LEGACY",
            private_app="YOUR_PRIVATE_APP",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.public_object.post_crm_v_3_objects_contacts_merge_merge(
                object_id_to_merge="objectIdToMerge",
                primary_object_id="primaryObjectId",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "crm/v3/objects/contacts/merge",
            method="POST",
            json={"objectIdToMerge": object_id_to_merge, "primaryObjectId": primary_object_id},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(SimplePublicObject, _response.json())  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
