# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.pydantic_utilities import pydantic_v1
from ..core.request_options import RequestOptions
from ..types.collection_response_with_total_simple_public_object_forward_paging import (
    CollectionResponseWithTotalSimplePublicObjectForwardPaging,
)
from ..types.filter_group import FilterGroup

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class SearchClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def post_crm_v_3_objects_contacts_search_do_search(
        self,
        *,
        limit: int,
        after: str,
        sorts: typing.Sequence[str],
        properties: typing.Sequence[str],
        filter_groups: typing.Sequence[FilterGroup],
        query: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None
    ) -> CollectionResponseWithTotalSimplePublicObjectForwardPaging:
        """
        Parameters
        ----------
        limit : int

        after : str

        sorts : typing.Sequence[str]

        properties : typing.Sequence[str]

        filter_groups : typing.Sequence[FilterGroup]

        query : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CollectionResponseWithTotalSimplePublicObjectForwardPaging
            successful operation

        Examples
        --------
        from rollout import Filter, FilterGroup
        from rollout.client import RolloutApi

        client = RolloutApi(
            private_app_legacy="YOUR_PRIVATE_APP_LEGACY",
            private_app="YOUR_PRIVATE_APP",
            token="YOUR_TOKEN",
        )
        client.search.post_crm_v_3_objects_contacts_search_do_search(
            limit=1,
            after="after",
            sorts=["sorts"],
            properties=["properties"],
            filter_groups=[
                FilterGroup(
                    filters=[
                        Filter(
                            property_name="propertyName",
                            operator="EQ",
                        )
                    ],
                )
            ],
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "crm/v3/objects/contacts/search",
            method="POST",
            json={
                "query": query,
                "limit": limit,
                "after": after,
                "sorts": sorts,
                "properties": properties,
                "filterGroups": filter_groups,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(CollectionResponseWithTotalSimplePublicObjectForwardPaging, _response.json())  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncSearchClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def post_crm_v_3_objects_contacts_search_do_search(
        self,
        *,
        limit: int,
        after: str,
        sorts: typing.Sequence[str],
        properties: typing.Sequence[str],
        filter_groups: typing.Sequence[FilterGroup],
        query: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None
    ) -> CollectionResponseWithTotalSimplePublicObjectForwardPaging:
        """
        Parameters
        ----------
        limit : int

        after : str

        sorts : typing.Sequence[str]

        properties : typing.Sequence[str]

        filter_groups : typing.Sequence[FilterGroup]

        query : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CollectionResponseWithTotalSimplePublicObjectForwardPaging
            successful operation

        Examples
        --------
        import asyncio

        from rollout import Filter, FilterGroup
        from rollout.client import AsyncRolloutApi

        client = AsyncRolloutApi(
            private_app_legacy="YOUR_PRIVATE_APP_LEGACY",
            private_app="YOUR_PRIVATE_APP",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.search.post_crm_v_3_objects_contacts_search_do_search(
                limit=1,
                after="after",
                sorts=["sorts"],
                properties=["properties"],
                filter_groups=[
                    FilterGroup(
                        filters=[
                            Filter(
                                property_name="propertyName",
                                operator="EQ",
                            )
                        ],
                    )
                ],
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "crm/v3/objects/contacts/search",
            method="POST",
            json={
                "query": query,
                "limit": limit,
                "after": after,
                "sorts": sorts,
                "properties": properties,
                "filterGroups": filter_groups,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(CollectionResponseWithTotalSimplePublicObjectForwardPaging, _response.json())  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
