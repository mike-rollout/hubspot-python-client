# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.jsonable_encoder import jsonable_encoder
from ..core.pydantic_utilities import pydantic_v1
from ..core.request_options import RequestOptions
from ..types.collection_response_simple_public_object_with_associations_forward_paging import (
    CollectionResponseSimplePublicObjectWithAssociationsForwardPaging,
)
from ..types.public_associations_for_object import PublicAssociationsForObject
from ..types.simple_public_object import SimplePublicObject
from ..types.simple_public_object_with_associations import SimplePublicObjectWithAssociations

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class BasicClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get_crm_v_3_objects_contacts_contact_id_get_by_id(
        self,
        contact_id: str,
        *,
        properties: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        properties_with_history: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        associations: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        archived: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SimplePublicObjectWithAssociations:
        """
        Read an Object identified by `{contactId}`. `{contactId}` refers to the internal object ID. Control what is returned via the `properties` query param.

        Parameters
        ----------
        contact_id : str

        properties : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored.

        properties_with_history : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored.

        associations : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored.

        archived : typing.Optional[bool]
            Whether to return only results that have been archived.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SimplePublicObjectWithAssociations
            successful operation

        Examples
        --------
        from rollout.client import RolloutApi

        client = RolloutApi(
            private_app_legacy="YOUR_PRIVATE_APP_LEGACY",
            private_app="YOUR_PRIVATE_APP",
            token="YOUR_TOKEN",
        )
        client.basic.get_crm_v_3_objects_contacts_contact_id_get_by_id(
            contact_id="contactId",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"crm/v3/objects/contacts/{jsonable_encoder(contact_id)}",
            method="GET",
            params={
                "properties": properties,
                "propertiesWithHistory": properties_with_history,
                "associations": associations,
                "archived": archived,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(SimplePublicObjectWithAssociations, _response.json())  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete_crm_v_3_objects_contacts_contact_id_archive(
        self, contact_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Move an Object identified by `{contactId}` to the recycling bin.

        Parameters
        ----------
        contact_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from rollout.client import RolloutApi

        client = RolloutApi(
            private_app_legacy="YOUR_PRIVATE_APP_LEGACY",
            private_app="YOUR_PRIVATE_APP",
            token="YOUR_TOKEN",
        )
        client.basic.delete_crm_v_3_objects_contacts_contact_id_archive(
            contact_id="contactId",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"crm/v3/objects/contacts/{jsonable_encoder(contact_id)}", method="DELETE", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def patch_crm_v_3_objects_contacts_contact_id_update(
        self,
        contact_id: str,
        *,
        properties: typing.Dict[str, str],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SimplePublicObject:
        """
        Perform a partial update of an Object identified by `{contactId}`. `{contactId}` refers to the internal object ID. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.

        Parameters
        ----------
        contact_id : str

        properties : typing.Dict[str, str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SimplePublicObject
            successful operation

        Examples
        --------
        from rollout.client import RolloutApi

        client = RolloutApi(
            private_app_legacy="YOUR_PRIVATE_APP_LEGACY",
            private_app="YOUR_PRIVATE_APP",
            token="YOUR_TOKEN",
        )
        client.basic.patch_crm_v_3_objects_contacts_contact_id_update(
            contact_id="contactId",
            properties={
                "email": "bcooper@biglytics.net",
                "phone": "(877) 929-0687",
                "company": "Biglytics",
                "website": "biglytics.net",
                "lastname": "Cooper",
                "firstname": "Bryan",
            },
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"crm/v3/objects/contacts/{jsonable_encoder(contact_id)}",
            method="PATCH",
            json={"properties": properties},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(SimplePublicObject, _response.json())  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_crm_v_3_objects_contacts_get_page(
        self,
        *,
        limit: typing.Optional[int] = None,
        after: typing.Optional[str] = None,
        properties: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        properties_with_history: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        associations: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        archived: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CollectionResponseSimplePublicObjectWithAssociationsForwardPaging:
        """
        Read a page of contacts. Control what is returned via the `properties` query param.

        Parameters
        ----------
        limit : typing.Optional[int]
            The maximum number of results to display per page.

        after : typing.Optional[str]
            The paging cursor token of the last successfully read resource will be returned as the `paging.next.after` JSON property of a paged response containing more results.

        properties : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored.

        properties_with_history : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request.

        associations : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored.

        archived : typing.Optional[bool]
            Whether to return only results that have been archived.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CollectionResponseSimplePublicObjectWithAssociationsForwardPaging
            successful operation

        Examples
        --------
        from rollout.client import RolloutApi

        client = RolloutApi(
            private_app_legacy="YOUR_PRIVATE_APP_LEGACY",
            private_app="YOUR_PRIVATE_APP",
            token="YOUR_TOKEN",
        )
        client.basic.get_crm_v_3_objects_contacts_get_page()
        """
        _response = self._client_wrapper.httpx_client.request(
            "crm/v3/objects/contacts",
            method="GET",
            params={
                "limit": limit,
                "after": after,
                "properties": properties,
                "propertiesWithHistory": properties_with_history,
                "associations": associations,
                "archived": archived,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(CollectionResponseSimplePublicObjectWithAssociationsForwardPaging, _response.json())  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def post_crm_v_3_objects_contacts_create(
        self,
        *,
        associations: typing.Sequence[PublicAssociationsForObject],
        properties: typing.Dict[str, str],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SimplePublicObject:
        """
        Create a contact with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard contacts is provided.

        Parameters
        ----------
        associations : typing.Sequence[PublicAssociationsForObject]

        properties : typing.Dict[str, str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SimplePublicObject
            successful operation

        Examples
        --------
        from rollout import AssociationSpec, PublicAssociationsForObject, PublicObjectId
        from rollout.client import RolloutApi

        client = RolloutApi(
            private_app_legacy="YOUR_PRIVATE_APP_LEGACY",
            private_app="YOUR_PRIVATE_APP",
            token="YOUR_TOKEN",
        )
        client.basic.post_crm_v_3_objects_contacts_create(
            associations=[
                PublicAssociationsForObject(
                    types=[
                        AssociationSpec(
                            association_category="HUBSPOT_DEFINED",
                            association_type_id=1,
                        )
                    ],
                    to=PublicObjectId(
                        id="id",
                    ),
                )
            ],
            properties={
                "email": "bcooper@biglytics.net",
                "phone": "(877) 929-0687",
                "company": "Biglytics",
                "website": "biglytics.net",
                "lastname": "Cooper",
                "firstname": "Bryan",
            },
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "crm/v3/objects/contacts",
            method="POST",
            json={"associations": associations, "properties": properties},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(SimplePublicObject, _response.json())  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncBasicClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get_crm_v_3_objects_contacts_contact_id_get_by_id(
        self,
        contact_id: str,
        *,
        properties: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        properties_with_history: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        associations: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        archived: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SimplePublicObjectWithAssociations:
        """
        Read an Object identified by `{contactId}`. `{contactId}` refers to the internal object ID. Control what is returned via the `properties` query param.

        Parameters
        ----------
        contact_id : str

        properties : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored.

        properties_with_history : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored.

        associations : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored.

        archived : typing.Optional[bool]
            Whether to return only results that have been archived.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SimplePublicObjectWithAssociations
            successful operation

        Examples
        --------
        import asyncio

        from rollout.client import AsyncRolloutApi

        client = AsyncRolloutApi(
            private_app_legacy="YOUR_PRIVATE_APP_LEGACY",
            private_app="YOUR_PRIVATE_APP",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.basic.get_crm_v_3_objects_contacts_contact_id_get_by_id(
                contact_id="contactId",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"crm/v3/objects/contacts/{jsonable_encoder(contact_id)}",
            method="GET",
            params={
                "properties": properties,
                "propertiesWithHistory": properties_with_history,
                "associations": associations,
                "archived": archived,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(SimplePublicObjectWithAssociations, _response.json())  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete_crm_v_3_objects_contacts_contact_id_archive(
        self, contact_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Move an Object identified by `{contactId}` to the recycling bin.

        Parameters
        ----------
        contact_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from rollout.client import AsyncRolloutApi

        client = AsyncRolloutApi(
            private_app_legacy="YOUR_PRIVATE_APP_LEGACY",
            private_app="YOUR_PRIVATE_APP",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.basic.delete_crm_v_3_objects_contacts_contact_id_archive(
                contact_id="contactId",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"crm/v3/objects/contacts/{jsonable_encoder(contact_id)}", method="DELETE", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def patch_crm_v_3_objects_contacts_contact_id_update(
        self,
        contact_id: str,
        *,
        properties: typing.Dict[str, str],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SimplePublicObject:
        """
        Perform a partial update of an Object identified by `{contactId}`. `{contactId}` refers to the internal object ID. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.

        Parameters
        ----------
        contact_id : str

        properties : typing.Dict[str, str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SimplePublicObject
            successful operation

        Examples
        --------
        import asyncio

        from rollout.client import AsyncRolloutApi

        client = AsyncRolloutApi(
            private_app_legacy="YOUR_PRIVATE_APP_LEGACY",
            private_app="YOUR_PRIVATE_APP",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.basic.patch_crm_v_3_objects_contacts_contact_id_update(
                contact_id="contactId",
                properties={
                    "email": "bcooper@biglytics.net",
                    "phone": "(877) 929-0687",
                    "company": "Biglytics",
                    "website": "biglytics.net",
                    "lastname": "Cooper",
                    "firstname": "Bryan",
                },
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"crm/v3/objects/contacts/{jsonable_encoder(contact_id)}",
            method="PATCH",
            json={"properties": properties},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(SimplePublicObject, _response.json())  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_crm_v_3_objects_contacts_get_page(
        self,
        *,
        limit: typing.Optional[int] = None,
        after: typing.Optional[str] = None,
        properties: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        properties_with_history: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        associations: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        archived: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CollectionResponseSimplePublicObjectWithAssociationsForwardPaging:
        """
        Read a page of contacts. Control what is returned via the `properties` query param.

        Parameters
        ----------
        limit : typing.Optional[int]
            The maximum number of results to display per page.

        after : typing.Optional[str]
            The paging cursor token of the last successfully read resource will be returned as the `paging.next.after` JSON property of a paged response containing more results.

        properties : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored.

        properties_with_history : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request.

        associations : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored.

        archived : typing.Optional[bool]
            Whether to return only results that have been archived.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CollectionResponseSimplePublicObjectWithAssociationsForwardPaging
            successful operation

        Examples
        --------
        import asyncio

        from rollout.client import AsyncRolloutApi

        client = AsyncRolloutApi(
            private_app_legacy="YOUR_PRIVATE_APP_LEGACY",
            private_app="YOUR_PRIVATE_APP",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.basic.get_crm_v_3_objects_contacts_get_page()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "crm/v3/objects/contacts",
            method="GET",
            params={
                "limit": limit,
                "after": after,
                "properties": properties,
                "propertiesWithHistory": properties_with_history,
                "associations": associations,
                "archived": archived,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(CollectionResponseSimplePublicObjectWithAssociationsForwardPaging, _response.json())  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def post_crm_v_3_objects_contacts_create(
        self,
        *,
        associations: typing.Sequence[PublicAssociationsForObject],
        properties: typing.Dict[str, str],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SimplePublicObject:
        """
        Create a contact with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard contacts is provided.

        Parameters
        ----------
        associations : typing.Sequence[PublicAssociationsForObject]

        properties : typing.Dict[str, str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SimplePublicObject
            successful operation

        Examples
        --------
        import asyncio

        from rollout import AssociationSpec, PublicAssociationsForObject, PublicObjectId
        from rollout.client import AsyncRolloutApi

        client = AsyncRolloutApi(
            private_app_legacy="YOUR_PRIVATE_APP_LEGACY",
            private_app="YOUR_PRIVATE_APP",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.basic.post_crm_v_3_objects_contacts_create(
                associations=[
                    PublicAssociationsForObject(
                        types=[
                            AssociationSpec(
                                association_category="HUBSPOT_DEFINED",
                                association_type_id=1,
                            )
                        ],
                        to=PublicObjectId(
                            id="id",
                        ),
                    )
                ],
                properties={
                    "email": "bcooper@biglytics.net",
                    "phone": "(877) 929-0687",
                    "company": "Biglytics",
                    "website": "biglytics.net",
                    "lastname": "Cooper",
                    "firstname": "Bryan",
                },
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "crm/v3/objects/contacts",
            method="POST",
            json={"associations": associations, "properties": properties},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(SimplePublicObject, _response.json())  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
