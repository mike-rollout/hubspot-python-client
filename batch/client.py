# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.pydantic_utilities import pydantic_v1
from ..core.request_options import RequestOptions
from ..types.batch_response_simple_public_object import BatchResponseSimplePublicObject
from ..types.simple_public_object_batch_input import SimplePublicObjectBatchInput
from ..types.simple_public_object_id import SimplePublicObjectId
from ..types.simple_public_object_input_for_create import SimplePublicObjectInputForCreate

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class BatchClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def post_crm_v_3_objects_contacts_batch_read_read(
        self,
        *,
        properties_with_history: typing.Sequence[str],
        inputs: typing.Sequence[SimplePublicObjectId],
        properties: typing.Sequence[str],
        archived: typing.Optional[bool] = None,
        id_property: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None
    ) -> BatchResponseSimplePublicObject:
        """
        Parameters
        ----------
        properties_with_history : typing.Sequence[str]

        inputs : typing.Sequence[SimplePublicObjectId]

        properties : typing.Sequence[str]

        archived : typing.Optional[bool]
            Whether to return only results that have been archived.

        id_property : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BatchResponseSimplePublicObject
            successful operation

        Examples
        --------
        from rollout import SimplePublicObjectId
        from rollout.client import RolloutApi

        client = RolloutApi(
            private_app_legacy="YOUR_PRIVATE_APP_LEGACY",
            private_app="YOUR_PRIVATE_APP",
            token="YOUR_TOKEN",
        )
        client.batch.post_crm_v_3_objects_contacts_batch_read_read(
            properties_with_history=["propertiesWithHistory"],
            inputs=[
                SimplePublicObjectId(
                    id="id",
                )
            ],
            properties=["properties"],
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "crm/v3/objects/contacts/batch/read",
            method="POST",
            params={"archived": archived},
            json={
                "propertiesWithHistory": properties_with_history,
                "idProperty": id_property,
                "inputs": inputs,
                "properties": properties,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(BatchResponseSimplePublicObject, _response.json())  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def post_crm_v_3_objects_contacts_batch_archive_archive(
        self, *, inputs: typing.Sequence[SimplePublicObjectId], request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        inputs : typing.Sequence[SimplePublicObjectId]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from rollout import SimplePublicObjectId
        from rollout.client import RolloutApi

        client = RolloutApi(
            private_app_legacy="YOUR_PRIVATE_APP_LEGACY",
            private_app="YOUR_PRIVATE_APP",
            token="YOUR_TOKEN",
        )
        client.batch.post_crm_v_3_objects_contacts_batch_archive_archive(
            inputs=[
                SimplePublicObjectId(
                    id="id",
                )
            ],
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "crm/v3/objects/contacts/batch/archive",
            method="POST",
            json={"inputs": inputs},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def post_crm_v_3_objects_contacts_batch_create_create(
        self,
        *,
        inputs: typing.Sequence[SimplePublicObjectInputForCreate],
        request_options: typing.Optional[RequestOptions] = None
    ) -> BatchResponseSimplePublicObject:
        """
        Parameters
        ----------
        inputs : typing.Sequence[SimplePublicObjectInputForCreate]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BatchResponseSimplePublicObject
            successful operation

        Examples
        --------
        from rollout import (
            AssociationSpec,
            PublicAssociationsForObject,
            PublicObjectId,
            SimplePublicObjectInputForCreate,
        )
        from rollout.client import RolloutApi

        client = RolloutApi(
            private_app_legacy="YOUR_PRIVATE_APP_LEGACY",
            private_app="YOUR_PRIVATE_APP",
            token="YOUR_TOKEN",
        )
        client.batch.post_crm_v_3_objects_contacts_batch_create_create(
            inputs=[
                SimplePublicObjectInputForCreate(
                    associations=[
                        PublicAssociationsForObject(
                            types=[
                                AssociationSpec(
                                    association_category="HUBSPOT_DEFINED",
                                    association_type_id=1,
                                )
                            ],
                            to=PublicObjectId(
                                id="id",
                            ),
                        )
                    ],
                    properties={
                        "email": "bcooper@biglytics.net",
                        "phone": "(877) 929-0687",
                        "company": "Biglytics",
                        "website": "biglytics.net",
                        "lastname": "Cooper",
                        "firstname": "Bryan",
                    },
                )
            ],
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "crm/v3/objects/contacts/batch/create",
            method="POST",
            json={"inputs": inputs},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(BatchResponseSimplePublicObject, _response.json())  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def post_crm_v_3_objects_contacts_batch_update_update(
        self,
        *,
        inputs: typing.Sequence[SimplePublicObjectBatchInput],
        request_options: typing.Optional[RequestOptions] = None
    ) -> BatchResponseSimplePublicObject:
        """
        Parameters
        ----------
        inputs : typing.Sequence[SimplePublicObjectBatchInput]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BatchResponseSimplePublicObject
            successful operation

        Examples
        --------
        from rollout import SimplePublicObjectBatchInput
        from rollout.client import RolloutApi

        client = RolloutApi(
            private_app_legacy="YOUR_PRIVATE_APP_LEGACY",
            private_app="YOUR_PRIVATE_APP",
            token="YOUR_TOKEN",
        )
        client.batch.post_crm_v_3_objects_contacts_batch_update_update(
            inputs=[
                SimplePublicObjectBatchInput(
                    id="1",
                    properties={
                        "email": "bcooper@biglytics.net",
                        "phone": "(877) 929-0687",
                        "company": "Biglytics",
                        "website": "biglytics.net",
                        "lastname": "Cooper",
                        "firstname": "Bryan",
                    },
                )
            ],
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "crm/v3/objects/contacts/batch/update",
            method="POST",
            json={"inputs": inputs},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(BatchResponseSimplePublicObject, _response.json())  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncBatchClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def post_crm_v_3_objects_contacts_batch_read_read(
        self,
        *,
        properties_with_history: typing.Sequence[str],
        inputs: typing.Sequence[SimplePublicObjectId],
        properties: typing.Sequence[str],
        archived: typing.Optional[bool] = None,
        id_property: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None
    ) -> BatchResponseSimplePublicObject:
        """
        Parameters
        ----------
        properties_with_history : typing.Sequence[str]

        inputs : typing.Sequence[SimplePublicObjectId]

        properties : typing.Sequence[str]

        archived : typing.Optional[bool]
            Whether to return only results that have been archived.

        id_property : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BatchResponseSimplePublicObject
            successful operation

        Examples
        --------
        import asyncio

        from rollout import SimplePublicObjectId
        from rollout.client import AsyncRolloutApi

        client = AsyncRolloutApi(
            private_app_legacy="YOUR_PRIVATE_APP_LEGACY",
            private_app="YOUR_PRIVATE_APP",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.batch.post_crm_v_3_objects_contacts_batch_read_read(
                properties_with_history=["propertiesWithHistory"],
                inputs=[
                    SimplePublicObjectId(
                        id="id",
                    )
                ],
                properties=["properties"],
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "crm/v3/objects/contacts/batch/read",
            method="POST",
            params={"archived": archived},
            json={
                "propertiesWithHistory": properties_with_history,
                "idProperty": id_property,
                "inputs": inputs,
                "properties": properties,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(BatchResponseSimplePublicObject, _response.json())  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def post_crm_v_3_objects_contacts_batch_archive_archive(
        self, *, inputs: typing.Sequence[SimplePublicObjectId], request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        inputs : typing.Sequence[SimplePublicObjectId]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from rollout import SimplePublicObjectId
        from rollout.client import AsyncRolloutApi

        client = AsyncRolloutApi(
            private_app_legacy="YOUR_PRIVATE_APP_LEGACY",
            private_app="YOUR_PRIVATE_APP",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.batch.post_crm_v_3_objects_contacts_batch_archive_archive(
                inputs=[
                    SimplePublicObjectId(
                        id="id",
                    )
                ],
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "crm/v3/objects/contacts/batch/archive",
            method="POST",
            json={"inputs": inputs},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def post_crm_v_3_objects_contacts_batch_create_create(
        self,
        *,
        inputs: typing.Sequence[SimplePublicObjectInputForCreate],
        request_options: typing.Optional[RequestOptions] = None
    ) -> BatchResponseSimplePublicObject:
        """
        Parameters
        ----------
        inputs : typing.Sequence[SimplePublicObjectInputForCreate]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BatchResponseSimplePublicObject
            successful operation

        Examples
        --------
        import asyncio

        from rollout import (
            AssociationSpec,
            PublicAssociationsForObject,
            PublicObjectId,
            SimplePublicObjectInputForCreate,
        )
        from rollout.client import AsyncRolloutApi

        client = AsyncRolloutApi(
            private_app_legacy="YOUR_PRIVATE_APP_LEGACY",
            private_app="YOUR_PRIVATE_APP",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.batch.post_crm_v_3_objects_contacts_batch_create_create(
                inputs=[
                    SimplePublicObjectInputForCreate(
                        associations=[
                            PublicAssociationsForObject(
                                types=[
                                    AssociationSpec(
                                        association_category="HUBSPOT_DEFINED",
                                        association_type_id=1,
                                    )
                                ],
                                to=PublicObjectId(
                                    id="id",
                                ),
                            )
                        ],
                        properties={
                            "email": "bcooper@biglytics.net",
                            "phone": "(877) 929-0687",
                            "company": "Biglytics",
                            "website": "biglytics.net",
                            "lastname": "Cooper",
                            "firstname": "Bryan",
                        },
                    )
                ],
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "crm/v3/objects/contacts/batch/create",
            method="POST",
            json={"inputs": inputs},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(BatchResponseSimplePublicObject, _response.json())  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def post_crm_v_3_objects_contacts_batch_update_update(
        self,
        *,
        inputs: typing.Sequence[SimplePublicObjectBatchInput],
        request_options: typing.Optional[RequestOptions] = None
    ) -> BatchResponseSimplePublicObject:
        """
        Parameters
        ----------
        inputs : typing.Sequence[SimplePublicObjectBatchInput]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BatchResponseSimplePublicObject
            successful operation

        Examples
        --------
        import asyncio

        from rollout import SimplePublicObjectBatchInput
        from rollout.client import AsyncRolloutApi

        client = AsyncRolloutApi(
            private_app_legacy="YOUR_PRIVATE_APP_LEGACY",
            private_app="YOUR_PRIVATE_APP",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.batch.post_crm_v_3_objects_contacts_batch_update_update(
                inputs=[
                    SimplePublicObjectBatchInput(
                        id="1",
                        properties={
                            "email": "bcooper@biglytics.net",
                            "phone": "(877) 929-0687",
                            "company": "Biglytics",
                            "website": "biglytics.net",
                            "lastname": "Cooper",
                            "firstname": "Bryan",
                        },
                    )
                ],
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "crm/v3/objects/contacts/batch/update",
            method="POST",
            json={"inputs": inputs},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(BatchResponseSimplePublicObject, _response.json())  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
